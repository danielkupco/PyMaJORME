{% macro getName(attribute) %}
    {% if attribute.column_parameters|selectattr("name", "equalto", "name")|list|count > 0 -%}
    {#- uzima se poslednji name atribut, ako nije definisan uzima se naziv atributa za naziv kolone -#}
    name = "{{(attribute.column_parameters|selectattr("name", "equalto", "name")|list|last).value}}"
    {%- else -%}
    name = "{{attribute.name}}"
    {%- endif -%}
{% endmacro -%}

// Autogenerated by PyMaJORME on {{date}}
// This file has been generated using 'entity.template' file.

package {{package}}.entity;

{% for import in imports %}
import {{import}};
{% endfor %}

@Entity
@Table(name = "{{entity.name}}")
@SuppressWarnings("serial")
public class {{entity.name}} implements Serializable {

    {# Generating class attributes #}
    {% for attribute in entity.attributes %}
    {# da li postoji atribut ciji je name=GUID, posto se vraca generator pretvara se u listu #}
    {% if attribute.column_parameters|selectattr("name", "equalto", "GUID")|list|count > 0 %}
    @Id
    @GeneratedValue(strategy = IDENTITY)
    {% endif %}
    @Column({{getName(attribute)}}
    {#- uzimaju se svi parametri sa definisanim value atributom osim name-a -#}
    {%- for parameter in attribute.column_parameters|selectattr("value", "defined")|rejectattr("name", "equalto", "name") -%}
    , {{parameter.name}} = {{parameter.value}}
    {%- endfor -%}
    )
    {% if attribute.collection %}
    private {{attribute.collection|collectionGeneric}}<{{attribute.type.name|javatype}}> {{attribute.name}} = new {{attribute.collection|collectionConcrete}}<{{attribute.type.name|javatype}}>();
    {% else %}
    private {{attribute.type.name|javatype}} {{attribute.name}};
    {% endif %}

    {% endfor -%}

    {% for r in relations|destination(entity) %}
    @{{ r.relation_type|destination_types }}
    {#- JoinColumn annotation #}
    {%- if "ManyTo" in r.relation_type|destination_types %}

    @JoinColumn(
    {%- else -%}
    (
    {%- endif %}
    {#- ################### -#}
    {%- for parameter in r.column_parameters|selectattr("value", "defined") -%}
    {{ parameter.name }} = {{ parameter.value }}{{ ', ' }}
    {%- endfor -%}
    targetEntity = {{r.source.name}}.class, {{ 'mappedBy = ' ~ r.destination_name|default(r.destination.name|lower, true) }})
    private {{ r.source.name|destination_attribute(r.relation_type) }};

    {% endfor %}
    {% for r in relations|source(entity) %}
    @{{ r.relation_type|source_types }}
    {#- JoinColumn annotation #}
    {%- if "ManyTo" in r.relation_type|destination_types %}

    @JoinColumn(
    {%- else -%}
    (
    {%- endif %}
    {#- ################### -#}
    {%- for parameter in r.column_parameters|selectattr("value", "defined") -%}
    {{ parameter.name }} = {{ parameter.value }}{{ ', ' }}
    {%- endfor -%}
    targetEntity = {{r.destination.name}}.class 
    {%- if not r.relation_type == '->' -%}
    {{ ', mappedBy = ' ~ r.source_name|default(r.source.name|lower, true) }}
    {%- endif -%})
    private {{ r.destination.name|source_attribute(r.relation_type) }}; 

    {% endfor %}

    public {{entity.name}}() {
        // DO NOT EDIT! Empty constructor must exist!
        // One can add other constructors with parameters...
    }

    {% for attribute in entity.attributes %}
    public {{attribute.type|javatype}} get{{attribute.name|title}}() {
        return this.{{attribute.name}};
    }

    public void set{{attribute.name|title}}({{attribute.type|javatype}} new_value) {
        this.{{attribute.name}} = new_value;
    }

    {% endfor %}

}
