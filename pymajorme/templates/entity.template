{% import 'macros.html' as macros %}

// Autogenerated by PyMaJORME on {{date}}
// This file has been generated using 'entity.template' file.

package {{package}}.entity;

{% for import in imports %}
import {{import}};
{% endfor %}

@Entity
@Table(name = "{{entity.name}}")
@SuppressWarnings("serial")
public class {{entity.name}} implements Serializable {

    {# Generating class attributes #}
    {% for attribute in entity.attributes %}
    {# da li postoji atribut ciji je name=GUID, posto se vraca generator pretvara se u listu #}
    {% if attribute.column_parameters|selectattr("name", "equalto", "GUID")|list|count > 0 %}
    @Id
    @GeneratedValue(strategy = IDENTITY)
    {% endif %}
    @Column({{macros.getAttributeName(attribute)}}
    {#- uzimaju se svi parametri sa definisanim value atributom osim name-a -#}
    {%- for parameter in attribute.column_parameters|selectattr("value", "defined")|rejectattr("name", "equalto", "name") -%}
    , {{parameter.name}} = {{parameter.value}}
    {%- endfor -%}
    )
    {% if attribute.collection %}
    private {{attribute.collection|collectionGeneric}}<{{attribute.type.name|javatype}}> {{attribute.name}} = new {{attribute.collection|collectionConcrete}}<{{attribute.type.name|javatype}}>();
    {% else %}
    private {{attribute.type.name|javatype}} {{attribute.name}};
    {% endif %}

    {% endfor -%}

    {#- Attributes based on relations -#}

    {% for r in relations|source(entity) %}
    @{{ r.relation_type|relation_name(False) }}
    {{- macros.relationAnnotations(r.source, r.destination, r.relation_type|relation_name(False), False) }}
    private {{ r.destination|relation_attribute(r.relation_type, True) }};

    {% endfor %}

    {%- for r in relations|destination(entity) %}
    @{{ r.relation_type|relation_name(True) }}
    {{- macros.relationAnnotations(r.destination, r.source, r.relation_type|relation_name(True), True)}}
    private {{ r.source|relation_attribute(r.relation_type, False) }};

    {% endfor %}

    public {{entity.name}}() {
        // DO NOT EDIT! Empty constructor must exist!
        // One can add other constructors with parameters...
    }

    {% for attribute in entity.attributes %}
    public {{attribute.type|javatype}} get{{attribute.name|title}}() {
        return this.{{attribute.name}};
    }

    public void set{{attribute.name|title}}({{attribute.type|javatype}} new_value) {
        this.{{attribute.name}} = new_value;
    }

    {% endfor %}

}
