// Autogenerated by PyMaJORME on {{date}}
// This file has been generated using 'generic_dao_class.template' file.

package {{package}}.dao;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

public abstract class GenericDao<T, ID extends Serializable> extends Observable implements IGenericDao<T, ID> {

	private Class<T> entityType;

	@PersistenceContext(unitName = "SIKS")
	protected static EntityManager em;

	@SuppressWarnings("unchecked")
	public GenericDao() {
		entityType = (Class<T>) ((ParameterizedType) getClass()
				.getGenericSuperclass()).getActualTypeArguments()[0];
		if (em == null) {
			em = EntityManagerController.getEntityManager();
		}
	}

	public void loadNewEntityManager() {
		em = EntityManagerController.getEntityManager();
	}

	public Class<T> getEntityType() {
		return entityType;
	}

	public T findById(ID id) {
		T entity;
		entity = em.find(entityType, id);
		return entity;
	}

	@SuppressWarnings("unchecked")
	public List<T> findAll() {
		Query q = em.createQuery("SELECT x FROM " + entityType.getSimpleName() + " x");
		List<T> result = q.getResultList();
		return result;
	}

	@SuppressWarnings("unchecked")
	public List<T> findBy(String query) {
		Query q = em.createQuery(query);
		List<T> result = q.getResultList();
		return result;
	}

	public T persist(T entity) {
		em.persist(entity);
		return entity;
	}

	public T merge(T entity) {
		entity = em.merge(entity);
		return entity;
	}

	public void remove(T entity) {
		entity = em.merge(entity);
		em.remove(entity);
	}

	public void removeAll() {
		List<T> entities = findAll();
		for (T entity : entities) {
			em.remove(entity);
		}
	}

	public void flush() {
		em.flush();
	}

	public void clear() {
		em.clear();
	}

	public void close() {
		em.close();
	}

}
